import { ChainId } from 'sushi/chain'
import { z } from 'zod'

import type { Address } from 'viem'
import type { RP2ClaimChainId } from './types'

export const RP2ClaimAddress = {
  [ChainId.ARBITRUM]: '0x66343844d77B0805b942efFE6575a852b341Ba18',
  [ChainId.AVALANCHE]: '0x9c56E5FC69C8cC7A19EDB0f1881b2Da0695988C9',
  [ChainId.BOBA]: '0x3706192DaA094E01a6b83378eAE15f697ED86365',
  [ChainId.BSC]: '0x4cFe5Ee193075C7e9FAD102cE87AEa5EF2025B6b',
  [ChainId.ETHEREUM]: '0x049E1C6b35cD02d1fb2c62325A5FE9eA7E3Bc96C',
  [ChainId.FANTOM]: '0x5FeaE0Cedc9515784Df32C8779242FE8677776e6',
  [ChainId.ARBITRUM_NOVA]: '0x2eba324dB22b0dDeEFB5FFD0FF97631A35EFb8bB',
  [ChainId.OPTIMISM]: '0xE6E84929fd0269034BeaEB5c601C2b6C36E7a8B5',
  [ChainId.POLYGON]: '0xeaD6bD491457f3Aa7dbcb079FaAc93329837ABb0',
}

export const RP2MerkleTreeClaimSchema = z.object({
  user: z.string().transform((el) => el as Address),
  index: z.number(),
  amount: z.object({
    hex: z.string(),
  }),
  token: z.string().transform((el) => el as Address),
  proof: z.array(z.string()).transform((el) => el as Address[]),
})

export const RP2MerkleTreeSchema = z.object({
  merkleRoot: z.string(),
  claims: z.array(RP2MerkleTreeClaimSchema),
})

export const RP2ClaimChainIds = Object.keys(RP2ClaimAddress).map(
  (el) => +el as RP2ClaimChainId,
) as RP2ClaimChainId[]
